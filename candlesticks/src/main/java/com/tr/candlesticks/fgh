package com.tr.candlesticks;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tr.candlesticks.models.Candlestick;
import com.tr.candlesticks.models.Quote;
import com.tr.candlesticks.models.QuoteEvent;
import com.tr.candlesticks.services.Consumer1;
import com.tr.candlesticks.services.WebSocketClientService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.reactive.socket.WebSocketMessage;
import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;
import org.springframework.web.reactive.socket.client.WebSocketClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import reactor.netty.http.client.HttpClient;
import reactor.netty.http.client.WebsocketClientSpec;
import reactor.util.function.Tuple2;

import java.net.URI;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;


@SpringBootApplication
public class CandlesticksApplication implements CommandLineRunner {

	@Autowired
	WebSocketClientService consumer;

	public static void main(String[] args) {
		SpringApplication.run(CandlesticksApplication.class, args);
		ObjectMapper objectMapper = new ObjectMapper();
		LocalDateTime openTime = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES).plusMinutes(1); // Next minute
		LocalDateTime closeTime = openTime.plusMinutes(1); // One minute window

		HttpClient.create()
				.websocket(WebsocketClientSpec.builder().build())
				.uri("ws://localhost:8032/quotes")
				.handle((inbound, outbound) -> {
					return inbound.receive()
							.asString()
							.timestamp() // Attach a timestamp to each message
							.windowUntil(tuple -> {
								LocalDateTime messageTime = LocalDateTime.now();
								return messageTime.isAfter(closeTime); // Close window if the message time exceeds closeTime
							})
							.flatMap(window -> window.collectList())
							.doOnNext(messages -> processWindow(messages, openTime, closeTime))
							.then();
				})
				.subscribeOn(Schedulers.boundedElastic());
				//.block();
	}

	private static void processWindow(List<Tuple2<Long,String>> messages, LocalDateTime openTime, LocalDateTime closeTime) {
		System.out.println("Processing window from " + openTime + " to " + closeTime);
		messages.forEach(System.out::println);

		// Prepare for the next window
		// Adjust openTime and closeTime for the next window if necessary
		openTime = closeTime;
		closeTime = openTime.plusMinutes(1); // Set the next window's close time
	}

	private static Candlestick  appendMessage(String message)  {
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			QuoteEvent event =  objectMapper.readValue(message, QuoteEvent.class);
			Candlestick candlestick = new Candlestick(event.data().isin(),event.data().price(), LocalDateTime.now());
			return candlestick;
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;

	}

	@Override
	public void run(String... args) throws Exception {

		//consumer.connect();

	}
}
