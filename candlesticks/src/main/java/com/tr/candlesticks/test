package com.tr.candlesticks;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tr.candlesticks.models.Candlestick;
import com.tr.candlesticks.models.Quote;
import com.tr.candlesticks.models.QuoteEvent;
import com.tr.candlesticks.services.Consumer1;
import com.tr.candlesticks.services.WebSocketClientService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.reactive.socket.WebSocketMessage;
import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;
import org.springframework.web.reactive.socket.client.WebSocketClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.net.URI;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;


@SpringBootApplication
public class CandlesticksApplication implements CommandLineRunner {

	@Autowired
	WebSocketClientService consumer;

	public static void main(String[] args) {
		SpringApplication.run(CandlesticksApplication.class, args);
		ObjectMapper objectMapper = new ObjectMapper();

		WebSocketClient client = new ReactorNettyWebSocketClient();
		client.execute(URI.create("ws://localhost:8032/quotes"), session -> {
			System.out.println("WebSocket client connected");

			// Send a test message
			return session.send(Mono.just(session.textMessage("Hello from client")))
					.thenMany(session.receive().map(WebSocketMessage::getPayloadAsText)
							.map(data -> appendMessage(data))
							.window(Duration.ofSeconds(10))
							.flatMap(window -> window.collectList())
							.doOnNext(data -> {


										Optional<Candlestick> max = data.stream()
												.max(Comparator.comparing(Candlestick::price));

								Optional<Candlestick> min = data.stream()
										.min(Comparator.comparing(Candlestick::price));
								System.out.println("----------------------------------------------------------------");
										max.ifPresent(System.out::println);
								System.out.println("----------------------------------------------------------------");
								min.ifPresent(System.out::println);


										data.forEach(System.out::println);
								System.out.println("----------------------------------------------------------------");


									}

							))
					.then();
		}).block();
	}

	private static Candlestick  appendMessage(String message)  {
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			QuoteEvent event =  objectMapper.readValue(message, QuoteEvent.class);
			Candlestick candlestick = new Candlestick(event.data().isin(),event.data().price(), LocalDateTime.now());
			return candlestick;
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;

	}

	@Override
	public void run(String... args) throws Exception {

		//consumer.connect();

	}
}
