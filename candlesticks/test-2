package com.tr.candlesticks;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tr.candlesticks.models.Candlestick;
import com.tr.candlesticks.models.QuoteEvent;
import com.tr.candlesticks.models.WindowData;
import com.tr.candlesticks.services.WebSocketClientService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.reactive.socket.WebSocketMessage;
import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;
import org.springframework.web.reactive.socket.client.WebSocketClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;
import reactor.netty.http.client.HttpClient;
import reactor.netty.http.client.WebsocketClientSpec;
import reactor.netty.http.websocket.WebsocketInbound;
import reactor.netty.http.websocket.WebsocketOutbound;
import reactor.util.function.Tuple2;

import java.net.URI;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;


@SpringBootApplication
public class CandlesticksApplication implements CommandLineRunner {

	@Autowired
	WebSocketClientService consumer;

	public static void main(String[] args) {
		SpringApplication.run(CandlesticksApplication.class, args);
		ObjectMapper objectMapper = new ObjectMapper();
		AtomicReference<LocalDateTime> openTimeRef = new AtomicReference<>(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES).plusMinutes(1));
		AtomicReference<LocalDateTime> closeTimeRef = new AtomicReference<>(openTimeRef.get().plusMinutes(1));


		WebSocketClient client = new ReactorNettyWebSocketClient();
		client.execute(URI.create("ws://localhost:8032/quotes"), session -> {
			System.out.println("WebSocket client connected");

			// Send a test message
			return session.send(Flux.just(session.textMessage("Hello from client")))
					.thenMany(session.receive().map(WebSocketMessage::getPayloadAsText)
							.timestamp()
							.map(data -> appendMessage(data.getT2()))
							.groupBy(Candlestick::isin)
							.window(Duration.ofSeconds(10))
							.flatMap(window -> window.collectList())
							.flatMap(Flux::fromIterable)
							.flatMap(groupedFlux ->
									groupedFlux.collectList().map(list ->
											new AbstractMap.SimpleEntry<>(groupedFlux.key(), list)
									)
							)
							.collectMap(Map.Entry::getKey, Map.Entry::getValue)
							.doOnNext(messages -> {
								System.out.println(messages);
								LocalDateTime windowStart = getRoundedStartTime();
								LocalDateTime windowEnd = windowStart.plusMinutes(1);
								processWindowData2(messages, windowStart, windowEnd);
							}))
					.then();

		}).block();

		/*HttpClient.create()
				.websocket(WebsocketClientSpec.builder().build())
				.uri("ws://localhost:8032/quotes")
				.handle((WebsocketInbound inbound, WebsocketOutbound outbound) -> {
					// Send a message to the WebSocket server
					return outbound.sendString(Mono.just("Hello from client"))
							.then().thenMany(


									inbound.receive()
											.asString()
											//.timestamp()
											.map(data -> appendMessage(data))
											.groupBy(Candlestick::isin)// Attach a timestamp to each message
											.window(Duration.ofSeconds(10))
											.flatMap(window -> window.collectList())
											.flatMap(Flux::fromIterable)
											.flatMap(groupedFlux ->
													groupedFlux.collectList().map(list ->
															new AbstractMap.SimpleEntry<>(groupedFlux.key(), list)
													)
											)
											.collectMap(Map.Entry::getKey, Map.Entry::getValue)
											.doOnNext(messages -> {
												LocalDateTime windowStart = getRoundedStartTime();
												LocalDateTime windowEnd = windowStart.plusMinutes(1);
												processWindowData2(messages, windowStart, windowEnd);
											}))
							.then();
				});
				//.subscribeOn(Schedulers.boundedElastic());
		//.block();*/
	}

	private static void processWindowData2(Map<String, List<Candlestick>> messages, LocalDateTime windowStart, LocalDateTime windowEnd) {

		ObjectMapper objectMapper = new ObjectMapper();
		List<Candlestick> list = new ArrayList<>();
		for (Map.Entry<String, List<Candlestick>> entry : messages.entrySet()) {
			String key = entry.getKey();
			List<Candlestick> value = entry.getValue();
			//System.out.println("Key: " + key + ", Value: " + value);
			WindowData windowData = new WindowData(windowStart, windowEnd, key,value);
			System.out.println(windowData);
		}




	}

	private static void processWindowData(List<Candlestick> messages, LocalDateTime openWindowTime, LocalDateTime closeWindowTime) {

		ObjectMapper objectMapper = new ObjectMapper();
		List<Candlestick> list = new ArrayList<>();
		messages.forEach(mesage -> {
			QuoteEvent event = null;
			try {
				Candlestick candlestick = new Candlestick(mesage.isin(),mesage.price());
				list.add(candlestick);
				//System.out.println(candlestick);
			} catch (Exception e) {
				e.printStackTrace();
			}


		});
		//WindowData windowData = new WindowData(openWindowTime, closeWindowTime, list);

		//System.out.println(windowData);
	}



	private static LocalDateTime getRoundedStartTime() {
		LocalDateTime now = LocalDateTime.now();
		return now.withSecond(0).withNano(0).minusMinutes(now.getMinute() % 1);
	}



	private static void processWindow(List<Tuple2<Long,String>> messages, LocalDateTime windowStart, LocalDateTime windowEnd) {
		System.out.println("Processing window from " + windowStart + " to " + windowEnd);
		ObjectMapper objectMapper = new ObjectMapper();
		List<Candlestick> list = new ArrayList<>();
		messages.forEach(mesage -> {
			QuoteEvent event = null;
			try {
				event = objectMapper.readValue(mesage.getT2(), QuoteEvent.class);
				Candlestick candlestick = new Candlestick(event.data().isin(),event.data().price());
				list.add(candlestick);
				//System.out.println(candlestick);
			} catch (JsonProcessingException e) {
				e.printStackTrace();
			}


		});
				//WindowData windowData = new WindowData(windowStart, windowEnd, list);

		//System.out.println(windowData);


		// Prepare for the next window
		// Adjust openTime and closeTime for the next window if necessary

	}

	private static Candlestick  appendMessage(String message)  {
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			QuoteEvent event =  objectMapper.readValue(message, QuoteEvent.class);
			Candlestick candlestick = new Candlestick(event.data().isin(),event.data().price());
			return candlestick;
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;

	}

	@Override
	public void run(String... args) throws Exception {

		//consumer.connect();

	}
}
